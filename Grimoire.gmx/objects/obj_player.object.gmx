<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_r_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
//General
end_lag = false;

//Physics
grav = 1.4;
spd = 5;
airspd = 4;
jspd = 16;
hspd = 0;
vspd = 0;
fric = 1;
jump_up = false;
jump = false;

//Health
max_hp = 5;
hp = max_hp;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Lag

end_lag = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics
//Controls
    var rkey = (keyboard_check(vk_right) || gamepad_axis_value(0, gp_axislh)) ;
    var lkey = (keyboard_check(vk_left) || (gamepad_axis_value(0, gp_axislh) == -1));
    jkey = (keyboard_check_pressed(vk_up) || gamepad_button_check(0, gp_face1));

// Check for the ground
var grounded = (place_meeting(x, y+1, obj_solid))
if grounded {
    vspd = 0;

    //Jumping
    if ((jkey) &amp;&amp; (!end_lag)){
        if (!(rkey ||lkey)) { //Jump Up
            vspd = -jspd;
        } else {
            vspd = -jspd*0.8 //Jump
        }
    }

} else {
    // Gravity
    if (vspd &lt; 50) { //Terminal Velocity
        vspd += grav;
    }
    
    if (keyboard_check_released(vk_up) &amp;&amp; vspd &lt; -3) { //Low Jump
        vspd = -3;
    }
}
    
// Moving Right
if ((rkey) &amp;&amp; (!lkey) &amp;&amp; (!end_lag)){
    if grounded {
        if (hspd &lt; spd) { //Ground Speed
            hspd += fric;
        } else {
            hspd = spd;
        }
    } else {
        if (hspd &lt; spd*0.8) { //Air Speed
            hspd += fric;
        } else {
            hspd = spd*0.8;
        }
    }
}

// Moving Left
if ((lkey) &amp;&amp; (!rkey) &amp;&amp; (!end_lag)) {
    if grounded {
        if (hspd &gt; -spd) { //Ground Speed
            hspd -= fric;
        } else {
            hspd = -spd;
        }
    } else {
        if (hspd &gt; -spd*0.8) { //Air Speed
            hspd -= fric;
        } else {
            hspd = -spd*0.8;
        }
    }
}

// Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey) || (end_lag)) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += fric;
        } else if (hspd &gt; 0) {
            hspd -= fric;
        }
    }
}

// Horizonal Collisions
if place_meeting(x+hspd,y,obj_solid) {
    yplus = 0;
    while (place_meeting(x+hspd,y-yplus,obj_solid) &amp;&amp; yplus &lt;= abs(1*hspd)) yplus += 1;
    if place_meeting(x+hspd,y-yplus,obj_solid)
    {
        while (!place_meeting(x+sign(hspd),y,obj_solid)) x+=sign(hspd);
        hspd = 0;
    }
    else
    {
        y -= yplus
    }
}

// Move Horizontally
x += hspd;

// Vertical Collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    if (vspd &gt; 0) { //Landing
        end_lag = true;
        if (vspd &gt; 12) {
            alarm[0] = 3; //Heavy Landing
        } else {
            alarm[0] = 1; //Light Landing
        }
    }
    vspd = 0;
}

// Move Vertically
y += vspd;

//Controlling the Sprites

//Jump straight up
if ((y!=yprevious) &amp;&amp; (!grounded) &amp;&amp; (!(rkey || lkey))) {
    if (y&lt;yprevious) { //Rising
        sprite_index = spr_r_jump_up;
        image_index = 0;
        if (vspd&gt;=-8) {
            image_index = 1;
        }
        if (vspd&gt;=-4) {
            image_index = 2;
        image_speed = 0;
        }
    } else if (y&gt;yprevious){ //Falling
        sprite_index = spr_r_jump_up;
        image_index = 3
        if (vspd&gt;2) {
            image_index = 4;
        }
        if (vspd&gt;5) {
            image_index = 5;
        image_speed = 0;
        }
    }
    if end_lag {
        sprite_index = spr_r_jump_up;
        image_index = 6;
        image_speed = 0;
    
    }
//Jump Forward
} else if ((y!=yprevious) &amp;&amp; (!grounded)) {
    if (y&lt;yprevious) { //Rising
        sprite_index = spr_r_jump;
        image_index = 0;
        if (vspd&gt;=-8) {
            image_index = 1;
        }
        if (vspd&gt;=-4) {
            image_index = 2;
        image_speed = 0;
        }
    } else if (y&gt;yprevious){ //Falling
        sprite_index = spr_r_jump;
        image_index = 3
        if (vspd&gt;2) {
            image_index = 4;
        }
        if (vspd&gt;5) {
            image_index = 5;
        image_speed = 0;
        }
    }
    if end_lag {
        sprite_index = spr_r_jump;
        image_index = 6;
        image_speed = 0;
    }

//Running on ground
} else if ((xprevious != x) &amp;&amp; grounded &amp;&amp; (!end_lag)) {
    sprite_index = spr_r_run;
    image_speed = 0.5;
    
//Idle on ground
} else if (grounded &amp;&amp; (!end_lag))  {
    sprite_index = spr_r_idle;
    image_speed = 0.25;
}

// Controlling the direction the player is faceing
if (xprevious &lt; x) {
    image_xscale = 1;    
} else if (xprevious &gt; x) {
    image_xscale =-1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health and Death
global.death = false;
//Health
obj_hp_gauge.image_index = hp;

if (hp = 0){ //Death trigger
    global.death = true;
    obj_checkpoint.alarm[0] = 30; //Set time for Respawn
    instance_destroy();
}
//Death Test
if keyboard_check_pressed(vk_backspace){ //-1hp
    hp -= 1;
}

if keyboard_check_pressed(vk_enter){ //+1hp
    hp += 1;
}
if hp &gt; max_hp hp = max_hp; //Cap at Max HP

//Fall Damage
if (place_meeting(x, y+vspd, obj_solid)) {
    if (vspd &gt; 16) { //Landing
        hp -= (round((vspd-16)/10))
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center Camera
if !global.death {
    view_object[0] = obj_player;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
