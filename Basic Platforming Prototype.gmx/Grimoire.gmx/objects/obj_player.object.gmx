<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_r_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
//General
in_control = true;
lag = 0;

//Physics
grav = 1.2;
spd = 5;
airspd = 4
jspd = 10;
hspd = 0;
vspd = 0;
fric = 1;

//Health
max_hp = 10;
hp = max_hp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics
//Controls
if in_control {
    var rkey = (keyboard_check(vk_right) || gamepad_axis_value(0, gp_axislh)) ;
    var lkey = (keyboard_check(vk_left) || (gamepad_axis_value(0, gp_axislh) == -1));
    var jkey = (keyboard_check(vk_up) || gamepad_button_check(0, gp_face1));
} else {
    rkey = false lkey = false jkey = false;
}

// Check for the ground
var grounded = (place_meeting(x, y+1, obj_solid))
if grounded {
    vspd = 0;
    
    //Jumping
    if (jkey){
        vspd = -jspd;
    }
    
} else {
    // Gravity
    if (vspd &lt; 20) {
        vspd += grav;
    }
    
    if (keyboard_check_released(vk_up) &amp;&amp; vspd &lt; -3) { //Low Jump
        vspd = -3;
    }
}
    
// Moving Right
if rkey {
    if grounded {
        if (hspd &lt; spd) {
            hspd += fric;
        } else {
            hspd = spd;
        }
    } else {
        if (hspd &lt; airspd) {
            hspd += fric;
        } else {
            hspd = airspd;
        }
    }
}

// Moving Left
if lkey {
    if grounded {
        if (hspd &gt; -spd) {
            hspd -= fric;
        } else {
            hspd = -spd;
        }
    } else {
        if (hspd &gt; -airspd) {
            hspd -= fric;
        } else {
            hspd = -airspd;
        }
    }
}

// Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += fric;
        } else if (hspd &gt; 0) {
            hspd -= fric;
        }
    }
}

//End Lag
while lag &gt; 0 {
    in_control = false;
    lag -= 1;
}
in_control = true;

// Horizonal Collisions
if place_meeting(x+hspd,y,obj_solid)
{
    yplus = 0;
    while (place_meeting(x+hspd,y-yplus,obj_solid) &amp;&amp; yplus &lt;= abs(1*hspd)) yplus += 1;
    if place_meeting(x+hspd,y-yplus,obj_solid)
    {
        while (!place_meeting(x+sign(hspd),y,obj_solid)) x+=sign(hspd);
        hspd = 0;
    }
    else
    {
        y -= yplus
    }
}

// Move Horizontally
x += hspd;

// Vertical Collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move Vertically
y += vspd;

//Controlling the Sprites
//Rising
if (vspd&lt;0) &amp;&amp; (!grounded){
    sprite_index = spr_r_jump_up;
    if vspd&gt;-4{
        image_index = 3;
        image_speed = 0;
    }
    image_speed = 0.35;
    
//Falling
} else if (vspd&gt;0) &amp;&amp; (!grounded){
    sprite_index = spr_r_jump_down;
    image_speed = 0;
    if (place_meeting(x, y+(2*vspd), obj_solid)) {
        image_speed = 0.5;
    }
        
} else {
    //Running on ground
    if ((xprevious != x) &amp;&amp; grounded) {
        sprite_index = spr_r_run;
        image_speed = 0.5;
    //Idle on ground
    } else if (place_meeting(x, y+1, obj_solid))  {
        sprite_index = spr_r_idle;
        image_speed = 0.25;
    }
}

// Controlling the direction the player is faceing
if (xprevious &lt; x) {
    image_xscale = 1;    
} else if (xprevious &gt; x) {
    image_xscale =-1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health and Death

//Death
var alive = (hp &gt; 0);
if !alive {
    instance_destroy();
    instance_create(64, 176, obj_player);
    hp = max_hp;
}    

//Death Test
if keyboard_check_pressed(vk_backspace) hp -= 1;
if keyboard_check_pressed(vk_enter) hp += 1;
if hp &gt; max_hp hp = max_hp; //Cap at Max HP

//Fall Damage
//The player loses health depending on the vspd they hit the ground
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
