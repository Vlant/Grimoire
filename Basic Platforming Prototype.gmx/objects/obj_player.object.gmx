<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_r_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
grav = 1.1;
spd = 5;
jspd = 12;
hspd = 0;
vspd = 0;
fric = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Platform Physics

var rkey = keyboard_check(vk_right);
var lkey = keyboard_check(vk_left);
var jkey = keyboard_check(vk_up);

// Check for the ground
if (place_meeting(x, y+1, obj_solid)) {
    vspd = 0;
    
    //Jumping
    if (jkey) {
        vspd = -jspd;
    }
} else {
    // Gravity
    if (vspd &lt; 20) {
        vspd += grav;
    }
    
    if (keyboard_check_released(vk_up) &amp;&amp; vspd &lt; -4) {
        vspd = -4;
    }
}

// Moving Right
if (rkey) {
    if (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
}

// Moving Left
if (lkey) {
    if (hspd &gt; spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
}

// Check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt; 0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
}

// Horizonal Collisions
if place_meeting(x+hspd, y, obj_solid)
{
    yplus = 0;
    while (place_meeting(x+hspd, y-yplus, obj_solid) &amp;&amp; yplus &lt;= abs(1*hspd)) yplus += 1; //Slopes
    if place_meeting(x+hspd, y-yplus, obj_solid)
    {
        while (!place_meeting(x+sign(hspd), y, obj_solid)) x+=sign(hspd);
        hspd = 0;
    }
    else
    {
        y -= yplus;
    }
}

// Move Horizontally
x += hspd;

// Vertical Collisions
if (place_meeting(x, y+vspd, obj_solid)) {
    while (!place_meeting(x, y+sign(vspd), obj_solid)) {
        y += sign(vspd);
    }
    vspd = 0;
}

// Move Vertically
y += vspd;

//Controlling the Sprites
//Falling
if (y&gt;yprevious) &amp;&amp; (!place_meeting(x, y+1, obj_solid)){
    sprite_index = spr_r_jump_down;
    image_speed = 0.1;
    if (image_index &gt; 2) {
        image_speed = 0;
    }
//Rising
} else if (y&lt;yprevious) &amp;&amp; (!place_meeting(x, y+1, obj_solid)){
    sprite_index = spr_r_jump_up;
    image_speed = 0.1;
    if (image_index &gt; 2) {
        image_speed = 0;
    }

} else {
    //Running on ground
    if ((xprevious != x) &amp;&amp; (place_meeting(x, y+1, obj_solid))) {
        sprite_index = spr_r_run;
        image_speed = 0.5;
    //Idle on ground
    } else if (place_meeting(x, y+1, obj_solid))  {
        sprite_index = spr_r_idle;
        image_speed = 0.2;
    }
}

// Controlling the direction the player is faceing
if (xprevious &lt; x) {
    image_xscale = 1;    
} else if (xprevious &gt; x) {
    image_xscale =-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
